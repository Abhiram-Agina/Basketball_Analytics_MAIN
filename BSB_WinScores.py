# -*- coding: utf-8 -*-
"""Mathletics_LinearWeights.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nYftngq8FT7eymTe5NVB2LncpjKy1tkR

NBA Efficiency Rating
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
import seaborn as sns

#BSB Win Scores = 
playerStatsDF = pd.read_csv('DATA/PlayerStats.csv')
refinedDF = playerStatsDF.drop(columns = ['Birthdate', 'Age', 'Birth_Place', 'Collage', 'Experience', 'Height', 'Pos', 'Weight', 'BMI'])
st.markdown("[Return to HomePage](https://share.streamlit.io/abhiram-agina/basketball_analytics_main/main/Basketball_Analytics_MAIN.py)")
st.title("Analyzing BSB Win Scores")
st.write("**NBA Dataset(2014 to 2015) -- Attributes for BSB's Win Scores:**")
st.dataframe(refinedDF)

#st.write(playerStatsDF['Team'].unique())
teamOptions = refinedDF['Team'].unique()
st.sidebar.header('**Select A Team:**')
selectedTeam = st.sidebar.selectbox('NBA Team', list(teamOptions))


userDF = refinedDF[refinedDF.Team == selectedTeam]

#Creating PPG Stats
userDF['PPG'] = round(refinedDF['PTS']/refinedDF['Games Played'], 2)
userDF['RPG'] = round(refinedDF['REB']/refinedDF['Games Played'], 2)
userDF['APG'] = round(refinedDF['AST']/refinedDF['Games Played'], 2)
userDF['SPG'] = round(refinedDF['STL']/refinedDF['Games Played'], 2)
userDF['BPG'] = round(refinedDF['BLK']/refinedDF['Games Played'], 2)
userDF['TOPG'] = round(refinedDF['TOV']/refinedDF['Games Played'], 2)
userDF['FGMissed'] = round((refinedDF['FGA'] - refinedDF['FGM'])/refinedDF['Games Played'], 2)
userDF['FTMissed'] = round((refinedDF['FTA'] - refinedDF['FTM'])/refinedDF['Games Played'], 2)
userDF['FGA'] = round(userDF['FGA']/userDF['Games Played'], 2)
userDF['FTA'] = round(userDF['FTA']/userDF['Games Played'], 2)
userDF['PF'] = round(userDF['PF']/userDF['Games Played'], 2)


st.write("**Selected Team Stats:**")
st.dataframe(userDF.drop(columns = ['PTS', 'REB', 'AST', 'MIN', 'STL', 'BLK', 'TOV', 'FGM', 'FTM', '3PM', '3PA', 'Games Played', 'FG%', '3P%', 'FT%','EFF', 'AST/TOV', 'STL/TOV', 'OREB', 'DREB']))


st.write("**Calculating Reg-Season Player Win Scores/Shares: **")
userDF["BSB's Win Scores"] = round(userDF['PPG'] + userDF['RPG'] + userDF['SPG'] + 0.5 * userDF['APG'] + 0.5 * userDF['BPG'] - userDF['FGA'] - userDF['TOPG'] + 
0.5 * (userDF['FTA']) - 0.5 * (userDF['PF']), 2)

fig = plt.subplots()
sns.barplot(x = userDF["Name"], y = userDF["BSB's Win Scores"], data = userDF["BSB's Win Scores"])
#st.set_option('deprecation.showPyplotGlobalUse', False)
plt.xticks(rotation = 75)

for index, value in enumerate(userDF["BSB's Win Scores"]):
    plt.text(index - 0.42, value, str(value), fontsize = 'small' ,fontstyle = 'italic', )

st.pyplot()

