# -*- coding: utf-8 -*-
"""Mathletics_LinearWeights.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nYftngq8FT7eymTe5NVB2LncpjKy1tkR

NBA Efficiency Rating
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st

#Efficiency Per Game = PPG + RPG + APG + SPG + BPG - TOPG - FGMissed - FTMissed
playerStatsDF = pd.read_csv('C:\\Users\\Robo1753\\Desktop\\Streamlit_Programs\\SPORTS ANALYTICS\\DATA\\PlayerStats.csv')
playerStatsDF = playerStatsDF.drop(columns = ['Birthdate', 'Age', 'Birth_Place', 'Collage', 'Experience', 'Height', 'Pos', 'Team', 'Weight', 'BMI'])
st.title("Analyzing NBA Player Efficiency in the 2014-15 Season")
st.write("**Dataset -- Attributes for NBA Efficiency:**")
st.dataframe(playerStatsDF.head())

#Creating PPG Stats
playerStatsDF['PPG'] = round(playerStatsDF['PTS']/playerStatsDF['Games Played'], 2)
#Creating RPG Stats
playerStatsDF['RPG'] = round(playerStatsDF['REB']/playerStatsDF['Games Played'], 2)
#Creating APG Stats
playerStatsDF['APG'] = round(playerStatsDF['AST']/playerStatsDF['Games Played'], 2)
#Creating SPG Stats
playerStatsDF['SPG'] = round(playerStatsDF['STL']/playerStatsDF['Games Played'], 2)
#Creating BPG Stats
playerStatsDF['BPG'] = round(playerStatsDF['BLK']/playerStatsDF['Games Played'], 2)
#Creating TOPG Stats
playerStatsDF['TOPG'] = round(playerStatsDF['TOV']/playerStatsDF['Games Played'], 2)
#Creating FGMissed Stats
playerStatsDF['FGMissed'] = round((playerStatsDF['FGA'] - playerStatsDF['FGM'])/playerStatsDF['Games Played'], 2)
#Creating FTMissed Stats
playerStatsDF['FTMissed'] = round((playerStatsDF['FTA'] - playerStatsDF['FTM'])/playerStatsDF['Games Played'], 2)

fig = plt.subplots()
EfficiencyPerGame = pd.DataFrame(playerStatsDF['PPG'] + playerStatsDF['RPG'] + playerStatsDF['APG'] + playerStatsDF['SPG'] + playerStatsDF['BPG'] - playerStatsDF['TOPG'] - playerStatsDF['FGMissed'] - playerStatsDF['FTMissed'])
playerStatsDF.insert(1, 'EfficiencyPerGame', round(EfficiencyPerGame, 2))
plt.hist(playerStatsDF['EfficiencyPerGame'])
st.set_option('deprecation.showPyplotGlobalUse', False)
st.write("**Distribution of NBA Efficiency:**")
st.pyplot()
st.markdown(
"""
**Analysis:**
* Displays the Average & Elite Efficiencies within the NBA.
* *Calculated through* --> NBA Efficiency = PPG + RPG + APG + SPG + BPG - TOPG - FGMissed - FTMissed
"""
)

#Worst NBA Efficiency Rated Players
worstPlayersDF = playerStatsDF.sort_values(by = 'EfficiencyPerGame', axis = 0, ascending = True, inplace = False)

correctedWPDF = worstPlayersDF[worstPlayersDF['Games Played'] >= 57]
correctedWPDF = correctedWPDF.drop(columns = ['Games Played', 'MIN', 'PTS', 'FGM', 'FGA', 'FG%', '3PM', '3PA', '3P%', 'FTM', 'FTA', 'FT%', 'OREB', 'DREB', 'REB', 'AST', 'STL', 'BLK', 'TOV', 'PF', 'EFF', 'AST/TOV', 'STL/TOV'])
st.write("**Worst NBA Efficiency Ratings (Players must play 70% of games to Qualify): **")
st.dataframe(correctedWPDF.head(10))

#Best NBA Efficiency Rated Players
bestPlayersDF = playerStatsDF.sort_values(by = 'EfficiencyPerGame', axis = 0, ascending = False, inplace = False)

correctedBPDF = bestPlayersDF[bestPlayersDF['Games Played'] >= 57]
correctedBPDF = correctedBPDF.drop(columns = ['Games Played', 'MIN', 'PTS', 'FGM', 'FGA', 'FG%', '3PM', '3PA', '3P%', 'FTM', 'FTA', 'FT%', 'OREB', 'DREB', 'REB', 'AST', 'STL', 'BLK', 'TOV', 'PF', 'EFF', 'AST/TOV', 'STL/TOV'])
st.write("**Best NBA Efficiency Ratings (Players must play 70% of games to Qualify): **")
st.dataframe(correctedBPDF.head(10))